cons	(cons 1 (cons 2 '())) -> '(1 2)
car	(car (list item1 item2 ...)) -> item1
cdr	(cdr '(list item1 item2 ...)) -> '(item2 item3 ...)
car-nth	(car-nth index '(list)) -> list[index]
cdr-nth	(cdr-nth index '(list)) -> (list-tail[index]...)
length	(length '(list)) -> quote-list-length
append	(append '(list1) '(list2)) -> '(list1 list2)
+	(+ ...) -> number
-	(- arg ...) -> number
*	(* ...) -> number
/	(/ arg ...) -> number
power	(power arg1 arg2) -> number
=	(= arg1 arg2) -> boolean
>	(> arg1 arg2) -> boolean
<	(< arg1 arg2) -> boolean
>=	(>= arg1 arg2) -> boolean
<=	(<= arg1 arg2) -> boolean
not	(not expr) -> boolean
equal	(equal '(list1) '(list2)) -> boolean
null?	(null? expr) -> boolean
typeid	(typeid expr) -> integar
number?	(number? expr) -> boolean
string?	(string? expr) -> boolean
slist?	(slist? expr) -> boolean
boolean?	(boolean? expr) -> boolean
eval	(eval '(...)) -> ...
load	(load "path/to/lisp") -> nil
read	(read "path/to/file") -> string
write	(write (list) path) (write item path)
write-append	(write-append (list) path) (write-append item path)
open	(open "path") -> file_descriptor | nil; (open "path" flag) -> file_descriptor | nil
close	(close file_descriptor) -> errno
split	(split "string to split") -> '("part1","part2", ...) (split "string to split" "seq-str") -> '("part1","part2", ...)
join	(join '("s1" "s2" ...)) -> "joined-text"; (join '("s1" "s2" ...) "seq") -> "joined-text"
http-get	(http-get "url") -> "<html>"; (http-get "url" "proxy-url" proxy-port-number) -> "<html>"
gumbo	(gumbo "<html>") -> gumboNode; (gumbo "<html>" "query-string") -> '(gumboNode)
gumbo-query	(gumbo-query gumboNode "selector-string") -> '(gumboNodes)
gqnode-attr	(gqnode:attr gumboNode "attrib-name") -> "attrib-value" | nil
gqnode-hasAttr	(gqnode:hasAttr gumboNode "attrib-name") -> boolean
gqnode-valid	(gqnode:valid gumboNode) -> boolean
gqnode-text	(gqnode:text gumboNode) -> "text"
gqnode-textNeat	(gqnode:textNeat gumboNode) -> "text"
gqnode-ownText	(gqnode:ownText gumboNode) -> "text"
gqnode-tag	(gqnode:tag gumboNode) -> "text"
gqnode-isText	(gqnode:isText gumboNode) -> boolean
gqnode-innerHtml	(gqnode:innerHtml gumboNode) -> "text"
gqnode-outerHtml	(gqnode:outerHtml gumboNode) -> "text"
gumbo-query-text	(gumbo-query-text "<html>" "selector-string") "node->text"
regex	(regex "regex-string") -> regex-obj
regex-match	(regex-match reg-obj target-string) -> bool
regex-search	(regex-search reg target offset = 0) -> (list sub0, sub1 ...)
regex-replace	(regex-replace reg-obj target fmt) -> string
regex-split	(regex-split sep-reg "target-string") -> (list stem1 stem2 ...)
regex-collect	(regex-collect reg "target-string"); (regex-collect reg "target-string" "fmt-string") -> (list matched-sub1 matched-sub2 ...)
substr	(substr "target-string" offset); (substr "target-string" offset length) -> sub-str
strlen	(strlen "target-string") -> length
shell	(shell "") -> '(stdout, stderr); (shell "" arg1 arg2 arg3) -> '(stdout, stderr)
shell-cd	(shell-cd "path/to/go") -> "new-work-dir"
shell-ls	(ls "dir1" "dir2" ...) -> '("item1","item2", ...)
shell-pwd	(pwd) -> "current-working-dir"
fnamemodify	(fnamemodify "path/string" "path modifier") -> "modified-fname"
glob	(glob "paht/to/explorer") -> '("fname1", "fname2", ...); (glob "paht/to/explorer" "fname-filter") -> '("fname1", "fname2", ...)
glob-recurse	(glob-recurse "paht/to/explorer") -> '("fname1", "fname2", ...); (glob-recurse "paht/to/explorer" "fname-filter") -> '("fname1", "fname2", ...); (glob-recurse "paht/to/explorer" "fname-filter" depth) -> '("fname1", "fname2", ...)
map	(map func list-1 list-2 ... list-n) -> '(func(l1[1] l2[1] ... ln[1]) func(l1[2] l2[2] ... ln[2]) ... func(l1[n] l2[n] ... ln[n]))
reduce	(reduce func list) -> func(func(func(l[1] l[2]) l[3]) ... l[n-1]) l[n])
filter	(filter func list) -> (sigma list[i] where (func list[i]) == #t)
uchardet	(uchardet "content") -> "utf8"
pychardet	(pychardet "content") -> "utf8"
ivchardet	(ivchardet "encodings" "content") -> "utf8"
iconv	(iconv "enc-from" "enc-to" "content") -> "converted-out"
ensure-utf8	(ensure-utf8 "content") -> "utf8-content"; (ensure-utf8 "content" "fencodings") -> "utf8-content"
quit	(quit) -> #t
it-debug	(it:debug #t|#f) -> nil
time	(time expr) -> result-of-expr
io-print	(io-print "fmt" ...)
io-print-ln	(io-print "fmt\n" ...)
io-fmt		(fmt "fmt-str" arg1 arg2 ... argn) -> "fmt-out"
io-fmt-escape	(fmt-escape "normal-string-may-have-curly-bracket") -> "scaped-string"
help	(help symbol) -> nil
get-help	(get-help symbol) -> string
&	(& int1 int2 ...) -> int
|	(| int1 int2 ...) -> int
~	(~ int) -> int
^	(^ int1 int2 ...) -> int
>>	(>> int shift) -> int
<<	(<< int shift) -> int
undef	(undef symbol) -> boolean
ifdef	(ifdef symbol) -> boolean
var-list	(var-list) -> int; (var-list env-name) -> int
sort	(sort func '(list)) -> '(sorted-list)
sort!	(sort! func '(list)) -> '(sorted-list)
errno	(errno) -> int
strerr	(strerr) -> string
